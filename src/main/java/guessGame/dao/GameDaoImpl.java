package com.example.guessGame.dao;

import com.example.guessGame.models.Game;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.*;
import java.util.List;

@Repository
public class GameDaoImpl implements GameDao{

    private final JdbcTemplate jdbc;

    public GameDaoImpl(JdbcTemplate jdbc) {
        this.jdbc = jdbc;
    }

    @Override
    public Game addGame(Game game) {
        //gameId will be autogenerated and finished is initialy false
        final String sql = "INSERT INTO game(answer) VALUES(?);";

        //grabbing keys that are auto-generated by DB
        GeneratedKeyHolder keyHolder = new GeneratedKeyHolder();

        //Connection to DB(conn)
        jdbc.update((Connection conn) -> {
            //Using statement to execute paramerized query
            PreparedStatement statement = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            statement.setString(1, game.getAnswer());
            return statement;
        }, keyHolder);
        //After update the retrieve key will be set as the gameId
        game.setGameId(keyHolder.getKey().intValue());

        return game;
    }

    @Override
    public List<Game> getAllGames() {
        final String sql = "SELECT * FROM game;";
        List<Game> allGames = jdbc.query(sql, new GameMapper());
        return allGames;
    }

    @Override
    public Game getGameById(int gameId) {
        try {
            final String sql = "SELECT * FROM game WHERE gameId = ?;";
            return jdbc.queryForObject(sql, new GameMapper(), gameId);
        } catch (DataAccessException ex) {
            return null;
        }
    }

    @Override
    public boolean updateGame(Game game) {
        final String sql = "UPDATE game SET answer = ?, finished = ? WHERE gameId = ?;";
        return jdbc.update(sql, game.getAnswer(), game.isFinished(), game.getGameId()) > 0;
    }

    @Override
    @Transactional //Will be used to either change everything or drop everything if one thing is missing
    public boolean deleteGame(int gameId) {
        //Delete all associated rounds with the game
        final String DELETE_ROUND = "DELETE FROM round WHERE gameId = ?";
        jdbc.update(DELETE_ROUND, gameId);

        final String sql = "DELETE FROM game WHERE gameId = ?;";
        return jdbc.update(sql, gameId) > 0;
    }


    private final class GameMapper implements RowMapper<Game> {

        @Override
        public Game mapRow(ResultSet rs, int index) throws SQLException {
            Game game = new Game();
            game.setGameId(rs.getInt("gameId"));
            game.setAnswer(rs.getString("answer"));
            game.setFinished(rs.getBoolean("finished"));
            return game;
        }
    }
}
